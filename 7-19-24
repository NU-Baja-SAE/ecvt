#include <Arduino.h>
// warning i do not know c/c++ however i do know arduino (ish) so that what i wrote this in but its taking issue with a lot of the things im 
//doing and i don't know if its a me issue or an ide-wants-c/c++ issue. nevertheless it is something. 

// also shoutout konrad for outlining most of this <3

// E-cvt automatic mode skeleton code
// Nominal restricted Kohler idle is 1700rpm, max is 3800rpm, and peak power is at 3000rpm.
int idleRPM = 1800; // Threshold RPM for idle to engage
int setpointRPM = 3000; // Engine power-maximizing RPM, and target for PID
int numHallMagnets = 6; // Number of magnets per revolution that trigger hall sensor
int encoderResolution = 4095; // Default 12-bit esp adc resolution, for scaling purposes

// Positions range from 0 to 1000, and are scaled later to encoder input range.
int idlePos = 50; // Sheave position where sheave disengages for idle
int lowPos = 100; // Sheave position for lowest gear possible
int highPos = 900; // Sheave position for highest gear possible

//ints for position pid gains;
//ints for engine rpm pid gains;
int engineRPM; // Calculated from hall sensor
int encoderReading; // ADC input from linear potentiometer
int position; // Sheave position, scale it to between 0-1000.
int hallCount; // Hall sensor counts 
int rpmTimerDeltaT = 500; // How often the timer triggers, in seconds
int pidLoopDelay; // how often the timer triggers in us

uint16_t pot_v;
uint16_t total_v;
uint8_t positionZero;
uint8_t positionThousand; 

uint8_t potPinOne = 1; // measures at potentiometer lever
uint8_t potPinTwo = 2; //measures across whole potentiometer resistor
uint8_t pwmPin = 3; // sends pulses to the motor 
uint8_t directionPin = 4; // controls the motor's direction
uint8_t brakePin = 5; //starts and stops the motor
uint8_t hallOutputPin = 6; // reads each time the hall sensor passes a magnet
uint8_t calibrationButton = 7; // starts calibration sequence
uint8_t limitSwitchOne = 8; //measures one of the maximum sheave travel positions
uint8_t limitSwitchTwo = 9; //measures the other maximum sheave travel position 


int setpointPos;//determined by engine rpm
// pid loop coefficients
int kpPos;
int kiPos;
int kdPos;

int kpRPM;
int kiRPM;
int kdRPM; 

float lastErrorPos = 0;
float errorPos = 0;
float changeErrorPos = 0;
float totalErrorPos = 0;
float pidTermPos = 0;

float lastErrorRPM = 0;
float errorRPM = 0;
float changeErrorRPM = 0;
float totalErrorRPM = 0;
float pidTermRPM = 0;


// if ypu dont get the naming conventions of my timer variables i don't either it's just the same conventions ilya uses 
// and in ilya we trust prayer hands emoji x3

// i dont really get the timer either so anyone reading this should expect Many Issues

hw_timer_t * rpmTimer = NULL; 
portMUX_TYPE rpmTimerMUX = portMUX_INITIALIZER_UNLOCKED;

void IRAM_ATTR hallReset() {
  portENTER_CRITICAL_ISR(&rpmTimerMUX);
    engineRPM = hallCount*60/(rpmTimerDeltaT*numHallMagnets);
    hallCount = 0;
  portEXIT_CRITICAL_ISR(&rpmTimerMUX);
}

hw_timer_t * pidTimerPos = NULL; 
portMUX_TYPE pidTimerPosMUX = portMUX_INITIALIZER_UNLOCKED;

hw_timer_t * pidTimerRPM = NULL; 
portMUX_TYPE pidTimerRPMMUX = portMUX_INITIALIZER_UNLOCKED;


void IRAM_ATTR pidLoopRPM() {
  portENTER_CRITICAL_ISR(&pidTimerRPMMUX);
    //idk some function
    //setpoint = 3000
    //current = engineRPM
    //can i make a read RPM function then put it in this loop or that prob doesn't work with the multisampling situation 
    rpmPidCalc();
  portEXIT_CRITICAL_ISR(&pidTimerRPMMUX);
}
//should these be within the same loop? not entirely sure how it works in separate ones 
void IRAM_ATTR pidLoopPos() {
  portENTER_CRITICAL_ISR(&pidTimerPosMUX);
    //idk some function
    //setpoint = pidTermRPM
    //current = position
    readPos();
    if (position > 900) {
      setpointPos = 899; 
      posPidCalc();
      ledcWrite(pwmPin, pidTermPos);
    }
    else if(position<50){
      setpointPos = 51; 
      posPidCalc();
      ledcWrite(pwmPin, pidTermPos);
    }
    else{
      setpointPos = pidTermRPM; 
    posPidCalc();
    ledcWrite(pwmPin, pidTermPos);
    }

  portEXIT_CRITICAL_ISR(&pidTimerPosMUX);
}

//add multisampling tiemr 


// put function declarations here:



// Interrupt to count hall effect rising edges
void IRAM_ATTR hallInterrupt() {
    hallCount++;
}

// interrupt to run calibration sequence 
void IRAM_ATTR calibrationInterrupt(){
while(digitalRead(limitSwitchOne) = LOW) {
digitalWrite(directionPin, HIGH);
analogWrite(pwmPin, 50);
}

//how to make this save as position zero ? - pot_v/total_v then save scaling in the position finding punction?
 pot_v = analogRead(potPinOne); // potentiometer lever
 total_v = analogRead(potPinTwo); // whole resistor
 positionZero = pot_v/total_v; 
digitalWrite(brakePin, LOW); 
delay(50);
digitalWrite(brakePin, HIGH);

while(digitalRead(limitSwitchTwo) = LOW) {
  digitalWrite(directionPin, LOW);
  analogWrite(pwmPin, 50);
}

// how to make position save as 1000? * 1000 * total_v / pot_v but then what 
 pot_v = analogRead(potPinOne); // potentiometer lever
 total_v = analogRead(potPinTwo); // whole resistor
 positionThousand = 1000 * total_v / pot_v; 
digitalWrite(brakePin, LOW);
delay(50);
digitalWrite(brakePin, HIGH); 
}

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  

  //configure whether pins will be sending or receiving data
  pinMode(potPinOne, INPUT);
  pinMode(potPinTwo, INPUT);
  pinMode(pwmPin, OUTPUT);
  pinMode(directionPin, OUTPUT);
  pinMode(brakePin, OUTPUT);
  pinMode(hallOutputPin, INPUT);
  pinMode(calibrationButton, INPUT);
  pinMode(limitSwitchOne, INPUT);
  pinMode(limitSwitchTwo, INPUT);

  //initialize variable values, will def need to add more
  digitalWrite(brakePin, HIGH); // set brake off
  hallCount = 0; 

  // interrupt set up
  attachInterrupt(digitalPinToInterrupt(hallOutputPin), hallInterrupt, RISING);
  attachInterrupt(digitalPinToInterrupt(calibrationButton), calibrationInterrupt, RISING);

  //hardware timer setup
  rpmTimer = timerBegin(1, 80, true);
  timerAttachInterrupt(rpmTimer, &hallReset, true);
  timerAlarmWrite(rpmTimer, rpmTimerDeltaT, true);
  timerAlarmEnable(rpmTimer);

  pidTimerRPM = timerBegin(2, 80, true);
  timerAttachInterrupt(pidTimerRPM, &pidLoopRPM, true);
  timerAlarmWrite(pidTimerRPM, pidLoopDelay, true);
  timerAlarmEnable(pidTimerRPM);

  pidTimerPos = timerBegin(3, 80, true);
  timerAttachInterrupt(pidTimerPos, &pidLoopPos, true);
  timerAlarmWrite(pidTimerPos, pidLoopDelay, true);
  timerAlarmEnable(pidTimerPos);

  ledcAttachPin(pwmPin, 0);
  ledcSetup(0,1500,4);

}

void loop() {
  // put your main code here, to run repeatedly:

  readPos();

    if(engineRPM < idleRPM) { // Idle case
//      PID the encoder position to idlePos -> output to motor PWM;
    } else if(position > highPos) { // Upper bound case
//        PID the encoder position to highPos -> output to motor PWM;
    } else if(position < lowPos) { // Lower bound case
//        PID the encoder position to lowPos -> output to motor PWM;
    } else { // It does this most of the time
//        PID the engine RPM to targetRPM -> use output as encoder position PID input;
//        PID the encoder position to rpm PID output -> output to motor PWM;
   }
}

// put function definitions here:




void rpmPidCalc() {
errorRPM = setpointRPM - engineRPM;

changeErrorRPM = errorRPM - lastErrorRPM;
totalErrorRPM += errorRPM;
pidTermRPM = (kpRPM * errorRPM) + (kiRPM * totalErrorRPM) + (kdRPM * changeErrorRPM);

lastErrorRPM = errorRPM;

}

void posPidCalc() {
  errorPos = setpointPos - position;

  changeErrorPos = errorPos - lastErrorPos; 
  totalErrorPos += errorRPM;
  pidTermPos = (kpPos * errorPos) + (kiPos * totalErrorPos) + (kdPos * changeErrorPos);

  lastErrorPos = errorPos; 
}

void readPos() {
pot_v = analogRead(potPinOne); // potentiometer lever
total_v = analogRead(potPinTwo); // whole resistor

// read the voltage across the potentiometer as a proportion, because when the voltage changes as the battery drains, the proportion will remain constant 
encoderReading = pot_v / total_v; // find how far along the resistor the potentiometer is as a fraction
position = positionThousand * (encoderReading - positionZero); // scale to make more workable number based on zero/thousand setpoints from calibration
// i think the math on the thousand side is a bit wonky (line 156);

}
